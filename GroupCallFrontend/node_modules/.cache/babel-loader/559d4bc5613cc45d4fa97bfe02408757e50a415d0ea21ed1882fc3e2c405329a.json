{"ast":null,"code":"var _jsxFileName = \"/Users/instavc/Desktop/WebRTC/webrtc-group-calling/GroupCallFrontend/group-call-frontend/src/components/GroupCall.js\",\n  _s = $RefreshSig$();\n/* eslint-disable default-case */\nimport React, { useEffect, useRef, useState } from 'react';\nimport './GroupCall.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GroupCall = ({\n  user,\n  onLeave\n}) => {\n  _s();\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n  const [isConnected, setIsConnected] = useState(false);\n  const [participants, setParticipants] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [activeRoom, setActiveRoom] = useState(null);\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const [peerConnections, setPeerConnections] = useState(new Map());\n  const wsRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localVideoRef = useRef(null);\n\n  // Fetch available rooms\n  useEffect(() => {\n    fetchRooms();\n    const interval = setInterval(fetchRooms, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const fetchRooms = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/rooms');\n      const data = await response.json();\n      setAvailableRooms(data.rooms);\n    } catch (error) {\n      console.error('Error fetching rooms:', error);\n    }\n  };\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    wsRef.current = new WebSocket('ws://localhost:3001');\n    wsRef.current.onopen = () => {\n      console.log('Connected to SFU server');\n      setIsConnected(true);\n    };\n    wsRef.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      handleMessage(data);\n    };\n    wsRef.current.onclose = () => {\n      console.log('Disconnected from SFU server');\n      setIsConnected(false);\n    };\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n      }\n    };\n  }, []);\n\n  // Get local media stream\n  useEffect(() => {\n    const getMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n        setLocalStream(stream);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error('Error accessing media devices:', error);\n      }\n    };\n    getMedia();\n    return () => {\n      if (localStream) {\n        localStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Setup WebRTC peer connection for a specific user\n  const setupPeerConnection = targetUserId => {\n    const peerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }]\n    });\n\n    // Add local stream tracks to peer connection\n    if (localStream) {\n      localStream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, localStream);\n      });\n    }\n\n    // Handle incoming tracks\n    peerConnection.ontrack = event => {\n      const stream = event.streams[0];\n      if (!remoteStreams.has(stream.id)) {\n        setRemoteStreams(prev => new Map(prev).set(stream.id, {\n          stream,\n          userId: targetUserId\n        }));\n      }\n    };\n\n    // Handle ICE candidates\n    peerConnection.onicecandidate = event => {\n      if (event.candidate && wsRef.current) {\n        wsRef.current.send(JSON.stringify({\n          type: 'ice-candidate',\n          userId: user.id,\n          targetUserId,\n          candidate: event.candidate\n        }));\n      }\n    };\n\n    // Handle connection state changes\n    peerConnection.onconnectionstatechange = () => {\n      console.log(`Connection state with ${targetUserId}:`, peerConnection.connectionState);\n      if (peerConnection.connectionState === 'failed') {\n        peerConnections.delete(targetUserId);\n        setPeerConnections(new Map(peerConnections));\n      }\n    };\n    peerConnections.set(targetUserId, peerConnection);\n    setPeerConnections(new Map(peerConnections));\n    return peerConnection;\n  };\n\n  // Handle incoming WebSocket messages\n  const handleMessage = async data => {\n    try {\n      switch (data.type) {\n        case 'joined':\n          console.log('Successfully joined room:', data.roomId);\n          setActiveRoom(data.roomId);\n          setParticipants(data.participants);\n\n          // Create peer connections with existing participants\n          data.participants.forEach(async participant => {\n            if (participant.userId !== user.id) {\n              const pc = setupPeerConnection(participant.userId);\n              const offer = await pc.createOffer();\n              await pc.setLocalDescription(offer);\n              wsRef.current.send(JSON.stringify({\n                type: 'offer',\n                userId: user.id,\n                targetUserId: participant.userId,\n                offer: pc.localDescription\n              }));\n            }\n          });\n          break;\n        case 'user-joined':\n          setParticipants(prev => [...prev, data.userInfo]);\n          break;\n        case 'offer':\n          const offerPc = setupPeerConnection(data.userId);\n          await offerPc.setRemoteDescription(new RTCSessionDescription(data.offer));\n          const answer = await offerPc.createAnswer();\n          await offerPc.setLocalDescription(answer);\n          wsRef.current.send(JSON.stringify({\n            type: 'answer',\n            userId: user.id,\n            targetUserId: data.userId,\n            answer: offerPc.localDescription\n          }));\n          break;\n        case 'answer':\n          const answerPc = peerConnections.get(data.userId);\n          if (answerPc) {\n            await answerPc.setRemoteDescription(new RTCSessionDescription(data.answer));\n          }\n          break;\n        case 'ice-candidate':\n          const candidatePc = peerConnections.get(data.userId);\n          if (candidatePc) {\n            try {\n              await candidatePc.addIceCandidate(new RTCIceCandidate(data.candidate));\n            } catch (error) {\n              console.error('Error adding ICE candidate:', error);\n            }\n          }\n          break;\n        case 'user-left':\n          setParticipants(prev => prev.filter(p => p.userId !== data.userId));\n          const pc = peerConnections.get(data.userId);\n          if (pc) {\n            pc.close();\n            peerConnections.delete(data.userId);\n            setPeerConnections(new Map(peerConnections));\n          }\n          setRemoteStreams(prev => {\n            const newStreams = new Map(prev);\n            prev.forEach((streamInfo, streamId) => {\n              if (streamInfo.userId === data.userId) {\n                newStreams.delete(streamId);\n              }\n            });\n            return newStreams;\n          });\n          break;\n        case 'error':\n          console.error('Server error:', data.message);\n          break;\n      }\n    } catch (error) {\n      console.error('Error handling message:', error);\n    }\n  };\n\n  // Create a new room\n  const createRoom = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/rooms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          userName: user.name\n        })\n      });\n      const room = await response.json();\n      joinRoom(room.roomId);\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n\n  // Join a room\n  const joinRoom = roomId => {\n    if (wsRef.current && isConnected) {\n      wsRef.current.send(JSON.stringify({\n        type: 'join',\n        roomId,\n        userId: user.id,\n        userInfo: {\n          id: user.id,\n          name: user.name,\n          avatar: user.avatar\n        }\n      }));\n    }\n  };\n\n  // Media controls\n  const toggleAudio = () => {\n    if (localStream) {\n      const enabled = !isMuted;\n      localStream.getAudioTracks().forEach(track => {\n        track.enabled = enabled;\n      });\n      setIsMuted(!enabled);\n    }\n  };\n  const toggleVideo = () => {\n    if (localStream) {\n      const enabled = !isVideoOff;\n      localStream.getVideoTracks().forEach(track => {\n        track.enabled = enabled;\n      });\n      setIsVideoOff(!enabled);\n    }\n  };\n  const leaveRoom = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n    }\n    // Close all peer connections\n    peerConnections.forEach(pc => pc.close());\n    setPeerConnections(new Map());\n    if (localStream) {\n      localStream.getTracks().forEach(track => track.stop());\n    }\n    setActiveRoom(null);\n    setRemoteStreams(new Map());\n    setParticipants([]);\n    onLeave();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-call-container\",\n    children: !activeRoom ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Rooms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createRoom,\n        children: \"Create New Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 308,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-list\",\n        children: availableRooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Room \", room.roomId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [room.participantCount, \" participants\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => joinRoom(room.roomId),\n            children: \"Join\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 314,\n            columnNumber: 33\n          }, this)]\n        }, room.roomId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 311,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 309,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container local\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 325,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label\",\n            children: [\"You \", isMuted && '(Muted)', \" \", isVideoOff && '(Video Off)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 331,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 25\n        }, this), Array.from(remoteStreams).map(([streamId, {\n          stream,\n          userId\n        }]) => {\n          const participant = participants.find(p => p.id === userId);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-container remote\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              autoPlay: true,\n              playsInline: true,\n              ref: el => {\n                if (el) el.srcObject = stream;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 339,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"video-label\",\n              children: (participant === null || participant === void 0 ? void 0 : participant.name) || 'Unknown'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 346,\n              columnNumber: 37\n            }, this)]\n          }, streamId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 338,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleAudio,\n          children: isMuted ? 'Unmute' : 'Mute'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 354,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleVideo,\n          children: isVideoOff ? 'Start Video' : 'Stop Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 357,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: leaveRoom,\n          className: \"leave-btn\",\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 360,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 353,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participants-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Participants (\", participants.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 365,\n          columnNumber: 25\n        }, this), participants.map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participant-item\",\n          children: [participant.avatar && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: participant.avatar,\n            alt: participant.name,\n            className: \"participant-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 369,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: participant.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 375,\n            columnNumber: 33\n          }, this)]\n        }, participant.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 364,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 304,\n    columnNumber: 9\n  }, this);\n};\n_s(GroupCall, \"W09FPD7hmDpNxOTlKu2JhF9w81E=\");\n_c = GroupCall;\nexport default GroupCall;\nvar _c;\n$RefreshReg$(_c, \"GroupCall\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupCall","user","onLeave","_s","localStream","setLocalStream","remoteStreams","setRemoteStreams","Map","isConnected","setIsConnected","participants","setParticipants","isMuted","setIsMuted","isVideoOff","setIsVideoOff","activeRoom","setActiveRoom","availableRooms","setAvailableRooms","peerConnections","setPeerConnections","wsRef","peerConnectionRef","localVideoRef","fetchRooms","interval","setInterval","clearInterval","response","fetch","data","json","rooms","error","console","current","WebSocket","onopen","log","onmessage","event","JSON","parse","handleMessage","onclose","close","getMedia","stream","navigator","mediaDevices","getUserMedia","video","audio","srcObject","getTracks","forEach","track","stop","setupPeerConnection","targetUserId","peerConnection","RTCPeerConnection","iceServers","urls","addTrack","ontrack","streams","has","id","prev","set","userId","onicecandidate","candidate","send","stringify","type","onconnectionstatechange","connectionState","delete","roomId","participant","pc","offer","createOffer","setLocalDescription","localDescription","userInfo","offerPc","setRemoteDescription","RTCSessionDescription","answer","createAnswer","answerPc","get","candidatePc","addIceCandidate","RTCIceCandidate","filter","p","newStreams","streamInfo","streamId","message","createRoom","method","headers","body","userName","name","room","joinRoom","avatar","toggleAudio","enabled","getAudioTracks","toggleVideo","getVideoTracks","leaveRoom","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","participantCount","ref","autoPlay","playsInline","muted","Array","from","find","el","length","src","alt","_c","$RefreshReg$"],"sources":["/Users/instavc/Desktop/WebRTC/webrtc-group-calling/GroupCallFrontend/group-call-frontend/src/components/GroupCall.js"],"sourcesContent":["/* eslint-disable default-case */\nimport React, { useEffect, useRef, useState } from 'react';\nimport './GroupCall.css';\n\nconst GroupCall = ({ user, onLeave }) => {\n    const [localStream, setLocalStream] = useState(null);\n    const [remoteStreams, setRemoteStreams] = useState(new Map());\n    const [isConnected, setIsConnected] = useState(false);\n    const [participants, setParticipants] = useState([]);\n    const [isMuted, setIsMuted] = useState(false);\n    const [isVideoOff, setIsVideoOff] = useState(false);\n    const [activeRoom, setActiveRoom] = useState(null);\n    const [availableRooms, setAvailableRooms] = useState([]);\n    const [peerConnections, setPeerConnections] = useState(new Map());\n\n    const wsRef = useRef(null);\n    const peerConnectionRef = useRef(null);\n    const localVideoRef = useRef(null);\n\n    // Fetch available rooms\n    useEffect(() => {\n        fetchRooms();\n        const interval = setInterval(fetchRooms, 5000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const fetchRooms = async () => {\n        try {\n            const response = await fetch('http://localhost:3001/api/rooms');\n            const data = await response.json();\n            setAvailableRooms(data.rooms);\n        } catch (error) {\n            console.error('Error fetching rooms:', error);\n        }\n    };\n\n    // Initialize WebSocket connection\n    useEffect(() => {\n        wsRef.current = new WebSocket('ws://localhost:3001');\n        \n        wsRef.current.onopen = () => {\n            console.log('Connected to SFU server');\n            setIsConnected(true);\n        };\n\n        wsRef.current.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            handleMessage(data);\n        };\n\n        wsRef.current.onclose = () => {\n            console.log('Disconnected from SFU server');\n            setIsConnected(false);\n        };\n\n        return () => {\n            if (wsRef.current) {\n                wsRef.current.close();\n            }\n            if (peerConnectionRef.current) {\n                peerConnectionRef.current.close();\n            }\n        };\n    }, []);\n\n    // Get local media stream\n    useEffect(() => {\n        const getMedia = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: true\n                });\n                setLocalStream(stream);\n                if (localVideoRef.current) {\n                    localVideoRef.current.srcObject = stream;\n                }\n            } catch (error) {\n                console.error('Error accessing media devices:', error);\n            }\n        };\n\n        getMedia();\n\n        return () => {\n            if (localStream) {\n                localStream.getTracks().forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    // Setup WebRTC peer connection for a specific user\n    const setupPeerConnection = (targetUserId) => {\n        const peerConnection = new RTCPeerConnection({\n            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n        });\n\n        // Add local stream tracks to peer connection\n        if (localStream) {\n            localStream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, localStream);\n            });\n        }\n\n        // Handle incoming tracks\n        peerConnection.ontrack = (event) => {\n            const stream = event.streams[0];\n            if (!remoteStreams.has(stream.id)) {\n                setRemoteStreams(prev => new Map(prev).set(stream.id, {\n                    stream,\n                    userId: targetUserId\n                }));\n            }\n        };\n\n        // Handle ICE candidates\n        peerConnection.onicecandidate = (event) => {\n            if (event.candidate && wsRef.current) {\n                wsRef.current.send(JSON.stringify({\n                    type: 'ice-candidate',\n                    userId: user.id,\n                    targetUserId,\n                    candidate: event.candidate\n                }));\n            }\n        };\n\n        // Handle connection state changes\n        peerConnection.onconnectionstatechange = () => {\n            console.log(`Connection state with ${targetUserId}:`, peerConnection.connectionState);\n            if (peerConnection.connectionState === 'failed') {\n                peerConnections.delete(targetUserId);\n                setPeerConnections(new Map(peerConnections));\n            }\n        };\n\n        peerConnections.set(targetUserId, peerConnection);\n        setPeerConnections(new Map(peerConnections));\n        return peerConnection;\n    };\n\n    // Handle incoming WebSocket messages\n    const handleMessage = async (data) => {\n        try {\n            switch (data.type) {\n                case 'joined':\n                    console.log('Successfully joined room:', data.roomId);\n                    setActiveRoom(data.roomId);\n                    setParticipants(data.participants);\n                    \n                    // Create peer connections with existing participants\n                    data.participants.forEach(async (participant) => {\n                        if (participant.userId !== user.id) {\n                            const pc = setupPeerConnection(participant.userId);\n                            const offer = await pc.createOffer();\n                            await pc.setLocalDescription(offer);\n                            wsRef.current.send(JSON.stringify({\n                                type: 'offer',\n                                userId: user.id,\n                                targetUserId: participant.userId,\n                                offer: pc.localDescription\n                            }));\n                        }\n                    });\n                    break;\n\n                case 'user-joined':\n                    setParticipants(prev => [...prev, data.userInfo]);\n                    break;\n\n                case 'offer':\n                    const offerPc = setupPeerConnection(data.userId);\n                    await offerPc.setRemoteDescription(new RTCSessionDescription(data.offer));\n                    const answer = await offerPc.createAnswer();\n                    await offerPc.setLocalDescription(answer);\n                    wsRef.current.send(JSON.stringify({\n                        type: 'answer',\n                        userId: user.id,\n                        targetUserId: data.userId,\n                        answer: offerPc.localDescription\n                    }));\n                    break;\n\n                case 'answer':\n                    const answerPc = peerConnections.get(data.userId);\n                    if (answerPc) {\n                        await answerPc.setRemoteDescription(new RTCSessionDescription(data.answer));\n                    }\n                    break;\n\n                case 'ice-candidate':\n                    const candidatePc = peerConnections.get(data.userId);\n                    if (candidatePc) {\n                        try {\n                            await candidatePc.addIceCandidate(new RTCIceCandidate(data.candidate));\n                        } catch (error) {\n                            console.error('Error adding ICE candidate:', error);\n                        }\n                    }\n                    break;\n\n                case 'user-left':\n                    setParticipants(prev => prev.filter(p => p.userId !== data.userId));\n                    const pc = peerConnections.get(data.userId);\n                    if (pc) {\n                        pc.close();\n                        peerConnections.delete(data.userId);\n                        setPeerConnections(new Map(peerConnections));\n                    }\n                    setRemoteStreams(prev => {\n                        const newStreams = new Map(prev);\n                        prev.forEach((streamInfo, streamId) => {\n                            if (streamInfo.userId === data.userId) {\n                                newStreams.delete(streamId);\n                            }\n                        });\n                        return newStreams;\n                    });\n                    break;\n\n                case 'error':\n                    console.error('Server error:', data.message);\n                    break;\n            }\n        } catch (error) {\n            console.error('Error handling message:', error);\n        }\n    };\n\n    // Create a new room\n    const createRoom = async () => {\n        try {\n            const response = await fetch('http://localhost:3001/api/rooms', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    userId: user.id,\n                    userName: user.name\n                })\n            });\n            const room = await response.json();\n            joinRoom(room.roomId);\n        } catch (error) {\n            console.error('Error creating room:', error);\n        }\n    };\n\n    // Join a room\n    const joinRoom = (roomId) => {\n        if (wsRef.current && isConnected) {\n            wsRef.current.send(JSON.stringify({\n                type: 'join',\n                roomId,\n                userId: user.id,\n                userInfo: {\n                    id: user.id,\n                    name: user.name,\n                    avatar: user.avatar\n                }\n            }));\n        }\n    };\n\n    // Media controls\n    const toggleAudio = () => {\n        if (localStream) {\n            const enabled = !isMuted;\n            localStream.getAudioTracks().forEach(track => {\n                track.enabled = enabled;\n            });\n            setIsMuted(!enabled);\n        }\n    };\n\n    const toggleVideo = () => {\n        if (localStream) {\n            const enabled = !isVideoOff;\n            localStream.getVideoTracks().forEach(track => {\n                track.enabled = enabled;\n            });\n            setIsVideoOff(!enabled);\n        }\n    };\n\n    const leaveRoom = () => {\n        if (wsRef.current) {\n            wsRef.current.close();\n        }\n        // Close all peer connections\n        peerConnections.forEach(pc => pc.close());\n        setPeerConnections(new Map());\n        if (localStream) {\n            localStream.getTracks().forEach(track => track.stop());\n        }\n        setActiveRoom(null);\n        setRemoteStreams(new Map());\n        setParticipants([]);\n        onLeave();\n    };\n\n    return (\n        <div className=\"group-call-container\">\n            {!activeRoom ? (\n                <div className=\"room-selection\">\n                    <h2>Available Rooms</h2>\n                    <button onClick={createRoom}>Create New Room</button>\n                    <div className=\"room-list\">\n                        {availableRooms.map(room => (\n                            <div key={room.roomId} className=\"room-item\">\n                                <span>Room {room.roomId}</span>\n                                <span>{room.participantCount} participants</span>\n                                <button onClick={() => joinRoom(room.roomId)}>\n                                    Join\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ) : (\n                <>\n                    <div className=\"video-grid\">\n                        <div className=\"video-container local\">\n                            <video\n                                ref={localVideoRef}\n                                autoPlay\n                                playsInline\n                                muted\n                            />\n                            <div className=\"video-label\">\n                                You {isMuted && '(Muted)'} {isVideoOff && '(Video Off)'}\n                            </div>\n                        </div>\n                        {Array.from(remoteStreams).map(([streamId, { stream, userId }]) => {\n                            const participant = participants.find(p => p.id === userId);\n                            return (\n                                <div key={streamId} className=\"video-container remote\">\n                                    <video\n                                        autoPlay\n                                        playsInline\n                                        ref={el => {\n                                            if (el) el.srcObject = stream;\n                                        }}\n                                    />\n                                    <div className=\"video-label\">\n                                        {participant?.name || 'Unknown'}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <div className=\"controls\">\n                        <button onClick={toggleAudio}>\n                            {isMuted ? 'Unmute' : 'Mute'}\n                        </button>\n                        <button onClick={toggleVideo}>\n                            {isVideoOff ? 'Start Video' : 'Stop Video'}\n                        </button>\n                        <button onClick={leaveRoom} className=\"leave-btn\">\n                            Leave Room\n                        </button>\n                    </div>\n                    <div className=\"participants-list\">\n                        <h3>Participants ({participants.length})</h3>\n                        {participants.map(participant => (\n                            <div key={participant.id} className=\"participant-item\">\n                                {participant.avatar && (\n                                    <img \n                                        src={participant.avatar} \n                                        alt={participant.name}\n                                        className=\"participant-avatar\"\n                                    />\n                                )}\n                                <span>{participant.name}</span>\n                            </div>\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default GroupCall; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}