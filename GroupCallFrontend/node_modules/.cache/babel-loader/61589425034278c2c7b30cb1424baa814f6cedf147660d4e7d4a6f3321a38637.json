{"ast":null,"code":"var _jsxFileName = \"/Users/instavc/Desktop/WebRTC/webrtc-group-calling/GroupCallFrontend/group-call-frontend/src/components/GroupCall.js\",\n  _s = $RefreshSig$();\n/* eslint-disable default-case */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport './GroupCall.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GroupCall = ({\n  user,\n  onLeave\n}) => {\n  _s();\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n  const [isConnected, setIsConnected] = useState(false);\n  const [participants, setParticipants] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [activeRoom, setActiveRoom] = useState(null);\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const socketRef = useRef(null);\n  const localVideoRef = useRef(null);\n  const peerConnections = useRef(new Map());\n  useEffect(() => {\n    // Initialize Socket.IO connection\n    socketRef.current = io('http://localhost:3001');\n\n    // Connection event handlers\n    socketRef.current.on('connect', () => {\n      console.log('Connected to call server');\n      setIsConnected(true);\n    });\n    socketRef.current.on('disconnect', () => {\n      console.log('Disconnected from call server');\n      setIsConnected(false);\n      cleanup();\n    });\n\n    // Room events\n    socketRef.current.on('room:joined', roomData => {\n      console.log('Joined room:', roomData);\n      setActiveRoom(roomData.roomId);\n      setParticipants(roomData.participants);\n    });\n    socketRef.current.on('participant:joined', participant => {\n      console.log('Participant joined:', participant);\n      setParticipants(prev => [...prev, participant]);\n    });\n    socketRef.current.on('participant:left', participant => {\n      console.log('Participant left:', participant);\n      setParticipants(prev => prev.filter(p => p.id !== participant.id));\n      handleParticipantDisconnect(participant.id);\n    });\n\n    // WebRTC signaling events\n    socketRef.current.on('webrtc:offer', async ({\n      from,\n      offer\n    }) => {\n      console.log('Received offer from:', from);\n      await handleOffer(from, offer);\n    });\n    socketRef.current.on('webrtc:answer', async ({\n      from,\n      answer\n    }) => {\n      console.log('Received answer from:', from);\n      await handleAnswer(from, answer);\n    });\n    socketRef.current.on('webrtc:ice-candidate', async ({\n      from,\n      candidate\n    }) => {\n      console.log('Received ICE candidate from:', from);\n      await handleIceCandidate(from, candidate);\n    });\n\n    // Initialize local media stream\n    initializeLocalStream();\n    return () => {\n      cleanup();\n    };\n  }, []);\n  const initializeLocalStream = async () => {\n    try {\n      const stream = await navigator.mediaDevices.getUserMedia({\n        audio: true,\n        video: true\n      });\n      setLocalStream(stream);\n      if (localVideoRef.current) {\n        localVideoRef.current.srcObject = stream;\n      }\n    } catch (error) {\n      console.error('Error accessing media devices:', error);\n    }\n  };\n  const handleOffer = async (from, offer) => {\n    try {\n      const peerConnection = createPeerConnection(from);\n      await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n      const answer = await peerConnection.createAnswer();\n      await peerConnection.setLocalDescription(answer);\n      socketRef.current.emit('webrtc:answer', {\n        to: from,\n        answer\n      });\n    } catch (error) {\n      console.error('Error handling offer:', error);\n    }\n  };\n  const handleAnswer = async (from, answer) => {\n    try {\n      const peerConnection = peerConnections.current.get(from);\n      if (peerConnection) {\n        await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n      }\n    } catch (error) {\n      console.error('Error handling answer:', error);\n    }\n  };\n  const handleIceCandidate = async (from, candidate) => {\n    try {\n      const peerConnection = peerConnections.current.get(from);\n      if (peerConnection) {\n        await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n      }\n    } catch (error) {\n      console.error('Error handling ICE candidate:', error);\n    }\n  };\n  const createPeerConnection = participantId => {\n    const configuration = {\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }, {\n        urls: 'stun:stun1.l.google.com:19302'\n      }]\n    };\n    const peerConnection = new RTCPeerConnection(configuration);\n\n    // Add local stream\n    if (localStream) {\n      localStream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, localStream);\n      });\n    }\n\n    // Handle ICE candidates\n    peerConnection.onicecandidate = event => {\n      if (event.candidate) {\n        socketRef.current.emit('webrtc:ice-candidate', {\n          to: participantId,\n          candidate: event.candidate\n        });\n      }\n    };\n\n    // Handle remote stream\n    peerConnection.ontrack = event => {\n      const [stream] = event.streams;\n      setRemoteStreams(prev => new Map(prev).set(participantId, stream));\n    };\n    peerConnections.current.set(participantId, peerConnection);\n    return peerConnection;\n  };\n  const handleParticipantDisconnect = participantId => {\n    // Clean up peer connection\n    const peerConnection = peerConnections.current.get(participantId);\n    if (peerConnection) {\n      peerConnection.close();\n      peerConnections.current.delete(participantId);\n    }\n\n    // Remove remote stream\n    setRemoteStreams(prev => {\n      const newStreams = new Map(prev);\n      newStreams.delete(participantId);\n      return newStreams;\n    });\n  };\n  const cleanup = () => {\n    // Stop local stream\n    if (localStream) {\n      localStream.getTracks().forEach(track => track.stop());\n    }\n\n    // Close all peer connections\n    peerConnections.current.forEach(connection => {\n      connection.close();\n    });\n    peerConnections.current.clear();\n\n    // Clear remote streams\n    setRemoteStreams(new Map());\n\n    // Disconnect socket\n    if (socketRef.current) {\n      socketRef.current.disconnect();\n    }\n  };\n  const toggleAudio = () => {\n    if (localStream) {\n      const audioTrack = localStream.getAudioTracks()[0];\n      if (audioTrack) {\n        audioTrack.enabled = !audioTrack.enabled;\n        setIsMuted(!audioTrack.enabled);\n      }\n    }\n  };\n  const toggleVideo = () => {\n    if (localStream) {\n      const videoTrack = localStream.getVideoTracks()[0];\n      if (videoTrack) {\n        videoTrack.enabled = !videoTrack.enabled;\n        setIsVideoOff(!videoTrack.enabled);\n      }\n    }\n  };\n  const leaveRoom = () => {\n    cleanup();\n    onLeave();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-call-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-grid\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-container local-video\",\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: localVideoRef,\n          autoPlay: true,\n          playsInline: true,\n          muted: true\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 235,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-overlay\",\n          children: /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [user.name, \" (You)\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 241,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 234,\n        columnNumber: 17\n      }, this), Array.from(remoteStreams).map(([participantId, stream]) => {\n        var _participants$find;\n        return /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            autoPlay: true,\n            playsInline: true,\n            ref: el => {\n              if (el) el.srcObject = stream;\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-overlay\",\n            children: /*#__PURE__*/_jsxDEV(\"span\", {\n              children: ((_participants$find = participants.find(p => p.id === participantId)) === null || _participants$find === void 0 ? void 0 : _participants$find.name) || 'Participant'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 257,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 256,\n            columnNumber: 25\n          }, this)]\n        }, participantId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 248,\n          columnNumber: 21\n        }, this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"controls\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleAudio,\n        children: isMuted ? '🔇 Unmute' : '🔊 Mute'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 264,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVideo,\n        children: isVideoOff ? '📷 Start Video' : '🎥 Stop Video'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: leaveRoom,\n        className: \"leave-btn\",\n        children: \"\\u274C Leave Call\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 263,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 231,\n    columnNumber: 9\n  }, this);\n};\n_s(GroupCall, \"zATFuuxp1hDOVEK7en+nB4VVQRw=\");\n_c = GroupCall;\nexport default GroupCall;\nvar _c;\n$RefreshReg$(_c, \"GroupCall\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","jsxDEV","_jsxDEV","GroupCall","user","onLeave","_s","localStream","setLocalStream","remoteStreams","setRemoteStreams","Map","isConnected","setIsConnected","participants","setParticipants","isMuted","setIsMuted","isVideoOff","setIsVideoOff","activeRoom","setActiveRoom","availableRooms","setAvailableRooms","socketRef","localVideoRef","peerConnections","current","on","console","log","cleanup","roomData","roomId","participant","prev","filter","p","id","handleParticipantDisconnect","from","offer","handleOffer","answer","handleAnswer","candidate","handleIceCandidate","initializeLocalStream","stream","navigator","mediaDevices","getUserMedia","audio","video","srcObject","error","peerConnection","createPeerConnection","setRemoteDescription","RTCSessionDescription","createAnswer","setLocalDescription","emit","to","get","addIceCandidate","RTCIceCandidate","participantId","configuration","iceServers","urls","RTCPeerConnection","getTracks","forEach","track","addTrack","onicecandidate","event","ontrack","streams","set","close","delete","newStreams","stop","connection","clear","disconnect","toggleAudio","audioTrack","getAudioTracks","enabled","toggleVideo","videoTrack","getVideoTracks","leaveRoom","className","children","ref","autoPlay","playsInline","muted","fileName","_jsxFileName","lineNumber","columnNumber","name","Array","map","_participants$find","el","find","onClick","_c","$RefreshReg$"],"sources":["/Users/instavc/Desktop/WebRTC/webrtc-group-calling/GroupCallFrontend/group-call-frontend/src/components/GroupCall.js"],"sourcesContent":["/* eslint-disable default-case */\nimport React, { useEffect, useRef, useState } from 'react';\nimport { io } from 'socket.io-client';\nimport './GroupCall.css';\n\nconst GroupCall = ({ user, onLeave }) => {\n    const [localStream, setLocalStream] = useState(null);\n    const [remoteStreams, setRemoteStreams] = useState(new Map());\n    const [isConnected, setIsConnected] = useState(false);\n    const [participants, setParticipants] = useState([]);\n    const [isMuted, setIsMuted] = useState(false);\n    const [isVideoOff, setIsVideoOff] = useState(false);\n    const [activeRoom, setActiveRoom] = useState(null);\n    const [availableRooms, setAvailableRooms] = useState([]);\n\n    const socketRef = useRef(null);\n    const localVideoRef = useRef(null);\n    const peerConnections = useRef(new Map());\n\n    useEffect(() => {\n        // Initialize Socket.IO connection\n        socketRef.current = io('http://localhost:3001');\n\n        // Connection event handlers\n        socketRef.current.on('connect', () => {\n            console.log('Connected to call server');\n            setIsConnected(true);\n        });\n\n        socketRef.current.on('disconnect', () => {\n            console.log('Disconnected from call server');\n            setIsConnected(false);\n            cleanup();\n        });\n\n        // Room events\n        socketRef.current.on('room:joined', (roomData) => {\n            console.log('Joined room:', roomData);\n            setActiveRoom(roomData.roomId);\n            setParticipants(roomData.participants);\n        });\n\n        socketRef.current.on('participant:joined', (participant) => {\n            console.log('Participant joined:', participant);\n            setParticipants(prev => [...prev, participant]);\n        });\n\n        socketRef.current.on('participant:left', (participant) => {\n            console.log('Participant left:', participant);\n            setParticipants(prev => prev.filter(p => p.id !== participant.id));\n            handleParticipantDisconnect(participant.id);\n        });\n\n        // WebRTC signaling events\n        socketRef.current.on('webrtc:offer', async ({ from, offer }) => {\n            console.log('Received offer from:', from);\n            await handleOffer(from, offer);\n        });\n\n        socketRef.current.on('webrtc:answer', async ({ from, answer }) => {\n            console.log('Received answer from:', from);\n            await handleAnswer(from, answer);\n        });\n\n        socketRef.current.on('webrtc:ice-candidate', async ({ from, candidate }) => {\n            console.log('Received ICE candidate from:', from);\n            await handleIceCandidate(from, candidate);\n        });\n\n        // Initialize local media stream\n        initializeLocalStream();\n\n        return () => {\n            cleanup();\n        };\n    }, []);\n\n    const initializeLocalStream = async () => {\n        try {\n            const stream = await navigator.mediaDevices.getUserMedia({\n                audio: true,\n                video: true\n            });\n            setLocalStream(stream);\n            if (localVideoRef.current) {\n                localVideoRef.current.srcObject = stream;\n            }\n        } catch (error) {\n            console.error('Error accessing media devices:', error);\n        }\n    };\n\n    const handleOffer = async (from, offer) => {\n        try {\n            const peerConnection = createPeerConnection(from);\n            await peerConnection.setRemoteDescription(new RTCSessionDescription(offer));\n            const answer = await peerConnection.createAnswer();\n            await peerConnection.setLocalDescription(answer);\n\n            socketRef.current.emit('webrtc:answer', {\n                to: from,\n                answer\n            });\n        } catch (error) {\n            console.error('Error handling offer:', error);\n        }\n    };\n\n    const handleAnswer = async (from, answer) => {\n        try {\n            const peerConnection = peerConnections.current.get(from);\n            if (peerConnection) {\n                await peerConnection.setRemoteDescription(new RTCSessionDescription(answer));\n            }\n        } catch (error) {\n            console.error('Error handling answer:', error);\n        }\n    };\n\n    const handleIceCandidate = async (from, candidate) => {\n        try {\n            const peerConnection = peerConnections.current.get(from);\n            if (peerConnection) {\n                await peerConnection.addIceCandidate(new RTCIceCandidate(candidate));\n            }\n        } catch (error) {\n            console.error('Error handling ICE candidate:', error);\n        }\n    };\n\n    const createPeerConnection = (participantId) => {\n        const configuration = {\n            iceServers: [\n                { urls: 'stun:stun.l.google.com:19302' },\n                { urls: 'stun:stun1.l.google.com:19302' }\n            ]\n        };\n\n        const peerConnection = new RTCPeerConnection(configuration);\n\n        // Add local stream\n        if (localStream) {\n            localStream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, localStream);\n            });\n        }\n\n        // Handle ICE candidates\n        peerConnection.onicecandidate = (event) => {\n            if (event.candidate) {\n                socketRef.current.emit('webrtc:ice-candidate', {\n                    to: participantId,\n                    candidate: event.candidate\n                });\n            }\n        };\n\n        // Handle remote stream\n        peerConnection.ontrack = (event) => {\n            const [stream] = event.streams;\n            setRemoteStreams(prev => new Map(prev).set(participantId, stream));\n        };\n\n        peerConnections.current.set(participantId, peerConnection);\n        return peerConnection;\n    };\n\n    const handleParticipantDisconnect = (participantId) => {\n        // Clean up peer connection\n        const peerConnection = peerConnections.current.get(participantId);\n        if (peerConnection) {\n            peerConnection.close();\n            peerConnections.current.delete(participantId);\n        }\n\n        // Remove remote stream\n        setRemoteStreams(prev => {\n            const newStreams = new Map(prev);\n            newStreams.delete(participantId);\n            return newStreams;\n        });\n    };\n\n    const cleanup = () => {\n        // Stop local stream\n        if (localStream) {\n            localStream.getTracks().forEach(track => track.stop());\n        }\n\n        // Close all peer connections\n        peerConnections.current.forEach(connection => {\n            connection.close();\n        });\n        peerConnections.current.clear();\n\n        // Clear remote streams\n        setRemoteStreams(new Map());\n\n        // Disconnect socket\n        if (socketRef.current) {\n            socketRef.current.disconnect();\n        }\n    };\n\n    const toggleAudio = () => {\n        if (localStream) {\n            const audioTrack = localStream.getAudioTracks()[0];\n            if (audioTrack) {\n                audioTrack.enabled = !audioTrack.enabled;\n                setIsMuted(!audioTrack.enabled);\n            }\n        }\n    };\n\n    const toggleVideo = () => {\n        if (localStream) {\n            const videoTrack = localStream.getVideoTracks()[0];\n            if (videoTrack) {\n                videoTrack.enabled = !videoTrack.enabled;\n                setIsVideoOff(!videoTrack.enabled);\n            }\n        }\n    };\n\n    const leaveRoom = () => {\n        cleanup();\n        onLeave();\n    };\n\n    return (\n        <div className=\"group-call-container\">\n            <div className=\"video-grid\">\n                {/* Local video */}\n                <div className=\"video-container local-video\">\n                    <video\n                        ref={localVideoRef}\n                        autoPlay\n                        playsInline\n                        muted\n                    />\n                    <div className=\"video-overlay\">\n                        <span>{user.name} (You)</span>\n                    </div>\n                </div>\n\n                {/* Remote videos */}\n                {Array.from(remoteStreams).map(([participantId, stream]) => (\n                    <div key={participantId} className=\"video-container\">\n                        <video\n                            autoPlay\n                            playsInline\n                            ref={el => {\n                                if (el) el.srcObject = stream;\n                            }}\n                        />\n                        <div className=\"video-overlay\">\n                            <span>{participants.find(p => p.id === participantId)?.name || 'Participant'}</span>\n                        </div>\n                    </div>\n                ))}\n            </div>\n\n            <div className=\"controls\">\n                <button onClick={toggleAudio}>\n                    {isMuted ? '🔇 Unmute' : '🔊 Mute'}\n                </button>\n                <button onClick={toggleVideo}>\n                    {isVideoOff ? '📷 Start Video' : '🎥 Stop Video'}\n                </button>\n                <button onClick={leaveRoom} className=\"leave-btn\">\n                    ❌ Leave Call\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default GroupCall; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}