{"ast":null,"code":"var _jsxFileName = \"/Users/instavc/Desktop/WebRTC/webrtc-group-calling/GroupCallFrontend/group-call-frontend/src/components/GroupCall.js\",\n  _s = $RefreshSig$();\n/* eslint-disable default-case */\nimport React, { useEffect, useRef, useState } from 'react';\nimport './GroupCall.css';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst GroupCall = ({\n  user,\n  onLeave\n}) => {\n  _s();\n  const [localStream, setLocalStream] = useState(null);\n  const [remoteStreams, setRemoteStreams] = useState(new Map());\n  const [isConnected, setIsConnected] = useState(false);\n  const [participants, setParticipants] = useState([]);\n  const [isMuted, setIsMuted] = useState(false);\n  const [isVideoOff, setIsVideoOff] = useState(false);\n  const [activeRoom, setActiveRoom] = useState(null);\n  const [availableRooms, setAvailableRooms] = useState([]);\n  const wsRef = useRef(null);\n  const peerConnectionRef = useRef(null);\n  const localVideoRef = useRef(null);\n\n  // Fetch available rooms\n  useEffect(() => {\n    fetchRooms();\n    const interval = setInterval(fetchRooms, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const fetchRooms = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/rooms');\n      const data = await response.json();\n      setAvailableRooms(data.rooms);\n    } catch (error) {\n      console.error('Error fetching rooms:', error);\n    }\n  };\n\n  // Initialize WebSocket connection\n  useEffect(() => {\n    wsRef.current = new WebSocket('ws://localhost:3001');\n    wsRef.current.onopen = () => {\n      console.log('Connected to SFU server');\n      setIsConnected(true);\n    };\n    wsRef.current.onmessage = event => {\n      const data = JSON.parse(event.data);\n      handleMessage(data);\n    };\n    wsRef.current.onclose = () => {\n      console.log('Disconnected from SFU server');\n      setIsConnected(false);\n    };\n    return () => {\n      if (wsRef.current) {\n        wsRef.current.close();\n      }\n      if (peerConnectionRef.current) {\n        peerConnectionRef.current.close();\n      }\n    };\n  }, []);\n\n  // Get local media stream\n  useEffect(() => {\n    const getMedia = async () => {\n      try {\n        const stream = await navigator.mediaDevices.getUserMedia({\n          video: true,\n          audio: true\n        });\n        setLocalStream(stream);\n        if (localVideoRef.current) {\n          localVideoRef.current.srcObject = stream;\n        }\n      } catch (error) {\n        console.error('Error accessing media devices:', error);\n      }\n    };\n    getMedia();\n    return () => {\n      if (localStream) {\n        localStream.getTracks().forEach(track => track.stop());\n      }\n    };\n  }, []);\n\n  // Setup WebRTC peer connection\n  const setupPeerConnection = () => {\n    const peerConnection = new RTCPeerConnection({\n      iceServers: [{\n        urls: 'stun:stun.l.google.com:19302'\n      }]\n    });\n\n    // Add local stream tracks to peer connection\n    if (localStream) {\n      localStream.getTracks().forEach(track => {\n        peerConnection.addTrack(track, localStream);\n      });\n    }\n\n    // Handle incoming tracks\n    peerConnection.ontrack = event => {\n      const stream = event.streams[0];\n      if (!remoteStreams.has(stream.id)) {\n        setRemoteStreams(prev => new Map(prev).set(stream.id, {\n          stream,\n          userId: event.userId\n        }));\n      }\n    };\n\n    // Handle ICE candidates\n    peerConnection.onicecandidate = event => {\n      if (event.candidate && wsRef.current) {\n        wsRef.current.send(JSON.stringify({\n          type: 'ice-candidate',\n          userId: user.id,\n          candidate: event.candidate\n        }));\n      }\n    };\n\n    // Handle connection state changes\n    peerConnection.onconnectionstatechange = () => {\n      console.log('Connection state:', peerConnection.connectionState);\n      switch (peerConnection.connectionState) {\n        case 'connected':\n          console.log('Successfully connected to peer');\n          break;\n        case 'disconnected':\n        case 'failed':\n          console.log('Connection failed or disconnected');\n          // Could implement reconnection logic here\n          break;\n      }\n    };\n    peerConnectionRef.current = peerConnection;\n    return peerConnection;\n  };\n\n  // Handle incoming WebSocket messages\n  const handleMessage = async data => {\n    try {\n      switch (data.type) {\n        case 'joined':\n          console.log('Successfully joined room:', data.roomId);\n          setActiveRoom(data.roomId);\n          setParticipants(data.participants);\n          const peerConnection = setupPeerConnection();\n\n          // Create and send offer\n          const offer = await peerConnection.createOffer();\n          await peerConnection.setLocalDescription(offer);\n          wsRef.current.send(JSON.stringify({\n            type: 'offer',\n            userId: user.id,\n            offer: peerConnection.localDescription\n          }));\n          break;\n        case 'answer':\n          if (peerConnectionRef.current) {\n            await peerConnectionRef.current.setRemoteDescription(new RTCSessionDescription(data.answer));\n          }\n          break;\n        case 'ice-candidate':\n          if (peerConnectionRef.current) {\n            try {\n              await peerConnectionRef.current.addIceCandidate(new RTCIceCandidate(data.candidate));\n            } catch (error) {\n              console.error('Error adding ICE candidate:', error);\n            }\n          }\n          break;\n        case 'user-joined':\n          setParticipants(prev => [...prev, data.userInfo]);\n          break;\n        case 'user-left':\n          setParticipants(prev => prev.filter(p => p.userId !== data.userId));\n          setRemoteStreams(prev => {\n            const newStreams = new Map(prev);\n            prev.forEach((streamInfo, streamId) => {\n              if (streamInfo.userId === data.userId) {\n                newStreams.delete(streamId);\n              }\n            });\n            return newStreams;\n          });\n          break;\n        case 'error':\n          console.error('Server error:', data.message);\n          break;\n      }\n    } catch (error) {\n      console.error('Error handling message:', error);\n    }\n  };\n\n  // Create a new room\n  const createRoom = async () => {\n    try {\n      const response = await fetch('http://localhost:3001/api/rooms', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          userId: user.id,\n          userName: user.name\n        })\n      });\n      const room = await response.json();\n      joinRoom(room.roomId);\n    } catch (error) {\n      console.error('Error creating room:', error);\n    }\n  };\n\n  // Join a room\n  const joinRoom = roomId => {\n    if (wsRef.current && isConnected) {\n      wsRef.current.send(JSON.stringify({\n        type: 'join',\n        roomId,\n        userId: user.id,\n        userInfo: {\n          id: user.id,\n          name: user.name,\n          avatar: user.avatar\n        }\n      }));\n    }\n  };\n\n  // Media controls\n  const toggleAudio = () => {\n    if (localStream) {\n      const enabled = !isMuted;\n      localStream.getAudioTracks().forEach(track => {\n        track.enabled = enabled;\n      });\n      setIsMuted(!enabled);\n    }\n  };\n  const toggleVideo = () => {\n    if (localStream) {\n      const enabled = !isVideoOff;\n      localStream.getVideoTracks().forEach(track => {\n        track.enabled = enabled;\n      });\n      setIsVideoOff(!enabled);\n    }\n  };\n  const leaveRoom = () => {\n    if (wsRef.current) {\n      wsRef.current.close();\n    }\n    if (peerConnectionRef.current) {\n      peerConnectionRef.current.close();\n    }\n    if (localStream) {\n      localStream.getTracks().forEach(track => track.stop());\n    }\n    setActiveRoom(null);\n    setRemoteStreams(new Map());\n    setParticipants([]);\n    onLeave();\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"group-call-container\",\n    children: !activeRoom ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"room-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Available Rooms\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 288,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: createRoom,\n        children: \"Create New Room\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"room-list\",\n        children: availableRooms.map(room => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"room-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            children: [\"Room \", room.roomId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: [room.participantCount, \" participants\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 294,\n            columnNumber: 33\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => joinRoom(room.roomId),\n            children: \"Join\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 295,\n            columnNumber: 33\n          }, this)]\n        }, room.roomId, true, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 29\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 290,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 287,\n      columnNumber: 17\n    }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"video-grid\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"video-container local\",\n          children: [/*#__PURE__*/_jsxDEV(\"video\", {\n            ref: localVideoRef,\n            autoPlay: true,\n            playsInline: true,\n            muted: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 306,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-label\",\n            children: [\"You \", isMuted && '(Muted)', \" \", isVideoOff && '(Video Off)']\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 312,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 25\n        }, this), Array.from(remoteStreams).map(([streamId, {\n          stream,\n          userId\n        }]) => {\n          const participant = participants.find(p => p.id === userId);\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"video-container remote\",\n            children: [/*#__PURE__*/_jsxDEV(\"video\", {\n              autoPlay: true,\n              playsInline: true,\n              ref: el => {\n                if (el) el.srcObject = stream;\n              }\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 320,\n              columnNumber: 37\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"video-label\",\n              children: (participant === null || participant === void 0 ? void 0 : participant.name) || 'Unknown'\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 327,\n              columnNumber: 37\n            }, this)]\n          }, streamId, true, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 33\n          }, this);\n        })]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"controls\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleAudio,\n          children: isMuted ? 'Unmute' : 'Mute'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 335,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: toggleVideo,\n          children: isVideoOff ? 'Start Video' : 'Stop Video'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: leaveRoom,\n          className: \"leave-btn\",\n          children: \"Leave Room\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 341,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 334,\n        columnNumber: 21\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"participants-list\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Participants (\", participants.length, \")\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 25\n        }, this), participants.map(participant => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"participant-item\",\n          children: [participant.avatar && /*#__PURE__*/_jsxDEV(\"img\", {\n            src: participant.avatar,\n            alt: participant.name,\n            className: \"participant-avatar\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 350,\n            columnNumber: 37\n          }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n            children: participant.name\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 356,\n            columnNumber: 33\n          }, this)]\n        }, participant.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 29\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 345,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 9\n  }, this);\n};\n_s(GroupCall, \"Dm7FkEPU5wxiA9aC3vyfM4tuYqU=\");\n_c = GroupCall;\nexport default GroupCall;\nvar _c;\n$RefreshReg$(_c, \"GroupCall\");","map":{"version":3,"names":["React","useEffect","useRef","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","GroupCall","user","onLeave","_s","localStream","setLocalStream","remoteStreams","setRemoteStreams","Map","isConnected","setIsConnected","participants","setParticipants","isMuted","setIsMuted","isVideoOff","setIsVideoOff","activeRoom","setActiveRoom","availableRooms","setAvailableRooms","wsRef","peerConnectionRef","localVideoRef","fetchRooms","interval","setInterval","clearInterval","response","fetch","data","json","rooms","error","console","current","WebSocket","onopen","log","onmessage","event","JSON","parse","handleMessage","onclose","close","getMedia","stream","navigator","mediaDevices","getUserMedia","video","audio","srcObject","getTracks","forEach","track","stop","setupPeerConnection","peerConnection","RTCPeerConnection","iceServers","urls","addTrack","ontrack","streams","has","id","prev","set","userId","onicecandidate","candidate","send","stringify","type","onconnectionstatechange","connectionState","roomId","offer","createOffer","setLocalDescription","localDescription","setRemoteDescription","RTCSessionDescription","answer","addIceCandidate","RTCIceCandidate","userInfo","filter","p","newStreams","streamInfo","streamId","delete","message","createRoom","method","headers","body","userName","name","room","joinRoom","avatar","toggleAudio","enabled","getAudioTracks","toggleVideo","getVideoTracks","leaveRoom","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","map","participantCount","ref","autoPlay","playsInline","muted","Array","from","participant","find","el","length","src","alt","_c","$RefreshReg$"],"sources":["/Users/instavc/Desktop/WebRTC/webrtc-group-calling/GroupCallFrontend/group-call-frontend/src/components/GroupCall.js"],"sourcesContent":["/* eslint-disable default-case */\nimport React, { useEffect, useRef, useState } from 'react';\nimport './GroupCall.css';\n\nconst GroupCall = ({ user, onLeave }) => {\n    const [localStream, setLocalStream] = useState(null);\n    const [remoteStreams, setRemoteStreams] = useState(new Map());\n    const [isConnected, setIsConnected] = useState(false);\n    const [participants, setParticipants] = useState([]);\n    const [isMuted, setIsMuted] = useState(false);\n    const [isVideoOff, setIsVideoOff] = useState(false);\n    const [activeRoom, setActiveRoom] = useState(null);\n    const [availableRooms, setAvailableRooms] = useState([]);\n\n    const wsRef = useRef(null);\n    const peerConnectionRef = useRef(null);\n    const localVideoRef = useRef(null);\n\n    // Fetch available rooms\n    useEffect(() => {\n        fetchRooms();\n        const interval = setInterval(fetchRooms, 5000);\n        return () => clearInterval(interval);\n    }, []);\n\n    const fetchRooms = async () => {\n        try {\n            const response = await fetch('http://localhost:3001/api/rooms');\n            const data = await response.json();\n            setAvailableRooms(data.rooms);\n        } catch (error) {\n            console.error('Error fetching rooms:', error);\n        }\n    };\n\n    // Initialize WebSocket connection\n    useEffect(() => {\n        wsRef.current = new WebSocket('ws://localhost:3001');\n        \n        wsRef.current.onopen = () => {\n            console.log('Connected to SFU server');\n            setIsConnected(true);\n        };\n\n        wsRef.current.onmessage = (event) => {\n            const data = JSON.parse(event.data);\n            handleMessage(data);\n        };\n\n        wsRef.current.onclose = () => {\n            console.log('Disconnected from SFU server');\n            setIsConnected(false);\n        };\n\n        return () => {\n            if (wsRef.current) {\n                wsRef.current.close();\n            }\n            if (peerConnectionRef.current) {\n                peerConnectionRef.current.close();\n            }\n        };\n    }, []);\n\n    // Get local media stream\n    useEffect(() => {\n        const getMedia = async () => {\n            try {\n                const stream = await navigator.mediaDevices.getUserMedia({\n                    video: true,\n                    audio: true\n                });\n                setLocalStream(stream);\n                if (localVideoRef.current) {\n                    localVideoRef.current.srcObject = stream;\n                }\n            } catch (error) {\n                console.error('Error accessing media devices:', error);\n            }\n        };\n\n        getMedia();\n\n        return () => {\n            if (localStream) {\n                localStream.getTracks().forEach(track => track.stop());\n            }\n        };\n    }, []);\n\n    // Setup WebRTC peer connection\n    const setupPeerConnection = () => {\n        const peerConnection = new RTCPeerConnection({\n            iceServers: [{ urls: 'stun:stun.l.google.com:19302' }]\n        });\n\n        // Add local stream tracks to peer connection\n        if (localStream) {\n            localStream.getTracks().forEach(track => {\n                peerConnection.addTrack(track, localStream);\n            });\n        }\n\n        // Handle incoming tracks\n        peerConnection.ontrack = (event) => {\n            const stream = event.streams[0];\n            if (!remoteStreams.has(stream.id)) {\n                setRemoteStreams(prev => new Map(prev).set(stream.id, {\n                    stream,\n                    userId: event.userId\n                }));\n            }\n        };\n\n        // Handle ICE candidates\n        peerConnection.onicecandidate = (event) => {\n            if (event.candidate && wsRef.current) {\n                wsRef.current.send(JSON.stringify({\n                    type: 'ice-candidate',\n                    userId: user.id,\n                    candidate: event.candidate\n                }));\n            }\n        };\n\n        // Handle connection state changes\n        peerConnection.onconnectionstatechange = () => {\n            console.log('Connection state:', peerConnection.connectionState);\n            switch (peerConnection.connectionState) {\n                case 'connected':\n                    console.log('Successfully connected to peer');\n                    break;\n                case 'disconnected':\n                case 'failed':\n                    console.log('Connection failed or disconnected');\n                    // Could implement reconnection logic here\n                    break;\n            }\n        };\n\n        peerConnectionRef.current = peerConnection;\n        return peerConnection;\n    };\n\n    // Handle incoming WebSocket messages\n    const handleMessage = async (data) => {\n        try {\n            switch (data.type) {\n                case 'joined':\n                    console.log('Successfully joined room:', data.roomId);\n                    setActiveRoom(data.roomId);\n                    setParticipants(data.participants);\n                    const peerConnection = setupPeerConnection();\n                    \n                    // Create and send offer\n                    const offer = await peerConnection.createOffer();\n                    await peerConnection.setLocalDescription(offer);\n                    wsRef.current.send(JSON.stringify({\n                        type: 'offer',\n                        userId: user.id,\n                        offer: peerConnection.localDescription\n                    }));\n                    break;\n\n                case 'answer':\n                    if (peerConnectionRef.current) {\n                        await peerConnectionRef.current.setRemoteDescription(\n                            new RTCSessionDescription(data.answer)\n                        );\n                    }\n                    break;\n\n                case 'ice-candidate':\n                    if (peerConnectionRef.current) {\n                        try {\n                            await peerConnectionRef.current.addIceCandidate(\n                                new RTCIceCandidate(data.candidate)\n                            );\n                        } catch (error) {\n                            console.error('Error adding ICE candidate:', error);\n                        }\n                    }\n                    break;\n\n                case 'user-joined':\n                    setParticipants(prev => [...prev, data.userInfo]);\n                    break;\n\n                case 'user-left':\n                    setParticipants(prev => prev.filter(p => p.userId !== data.userId));\n                    setRemoteStreams(prev => {\n                        const newStreams = new Map(prev);\n                        prev.forEach((streamInfo, streamId) => {\n                            if (streamInfo.userId === data.userId) {\n                                newStreams.delete(streamId);\n                            }\n                        });\n                        return newStreams;\n                    });\n                    break;\n\n                case 'error':\n                    console.error('Server error:', data.message);\n                    break;\n            }\n        } catch (error) {\n            console.error('Error handling message:', error);\n        }\n    };\n\n    // Create a new room\n    const createRoom = async () => {\n        try {\n            const response = await fetch('http://localhost:3001/api/rooms', {\n                method: 'POST',\n                headers: {\n                    'Content-Type': 'application/json'\n                },\n                body: JSON.stringify({\n                    userId: user.id,\n                    userName: user.name\n                })\n            });\n            const room = await response.json();\n            joinRoom(room.roomId);\n        } catch (error) {\n            console.error('Error creating room:', error);\n        }\n    };\n\n    // Join a room\n    const joinRoom = (roomId) => {\n        if (wsRef.current && isConnected) {\n            wsRef.current.send(JSON.stringify({\n                type: 'join',\n                roomId,\n                userId: user.id,\n                userInfo: {\n                    id: user.id,\n                    name: user.name,\n                    avatar: user.avatar\n                }\n            }));\n        }\n    };\n\n    // Media controls\n    const toggleAudio = () => {\n        if (localStream) {\n            const enabled = !isMuted;\n            localStream.getAudioTracks().forEach(track => {\n                track.enabled = enabled;\n            });\n            setIsMuted(!enabled);\n        }\n    };\n\n    const toggleVideo = () => {\n        if (localStream) {\n            const enabled = !isVideoOff;\n            localStream.getVideoTracks().forEach(track => {\n                track.enabled = enabled;\n            });\n            setIsVideoOff(!enabled);\n        }\n    };\n\n    const leaveRoom = () => {\n        if (wsRef.current) {\n            wsRef.current.close();\n        }\n        if (peerConnectionRef.current) {\n            peerConnectionRef.current.close();\n        }\n        if (localStream) {\n            localStream.getTracks().forEach(track => track.stop());\n        }\n        setActiveRoom(null);\n        setRemoteStreams(new Map());\n        setParticipants([]);\n        onLeave();\n    };\n\n    return (\n        <div className=\"group-call-container\">\n            {!activeRoom ? (\n                <div className=\"room-selection\">\n                    <h2>Available Rooms</h2>\n                    <button onClick={createRoom}>Create New Room</button>\n                    <div className=\"room-list\">\n                        {availableRooms.map(room => (\n                            <div key={room.roomId} className=\"room-item\">\n                                <span>Room {room.roomId}</span>\n                                <span>{room.participantCount} participants</span>\n                                <button onClick={() => joinRoom(room.roomId)}>\n                                    Join\n                                </button>\n                            </div>\n                        ))}\n                    </div>\n                </div>\n            ) : (\n                <>\n                    <div className=\"video-grid\">\n                        <div className=\"video-container local\">\n                            <video\n                                ref={localVideoRef}\n                                autoPlay\n                                playsInline\n                                muted\n                            />\n                            <div className=\"video-label\">\n                                You {isMuted && '(Muted)'} {isVideoOff && '(Video Off)'}\n                            </div>\n                        </div>\n                        {Array.from(remoteStreams).map(([streamId, { stream, userId }]) => {\n                            const participant = participants.find(p => p.id === userId);\n                            return (\n                                <div key={streamId} className=\"video-container remote\">\n                                    <video\n                                        autoPlay\n                                        playsInline\n                                        ref={el => {\n                                            if (el) el.srcObject = stream;\n                                        }}\n                                    />\n                                    <div className=\"video-label\">\n                                        {participant?.name || 'Unknown'}\n                                    </div>\n                                </div>\n                            );\n                        })}\n                    </div>\n                    <div className=\"controls\">\n                        <button onClick={toggleAudio}>\n                            {isMuted ? 'Unmute' : 'Mute'}\n                        </button>\n                        <button onClick={toggleVideo}>\n                            {isVideoOff ? 'Start Video' : 'Stop Video'}\n                        </button>\n                        <button onClick={leaveRoom} className=\"leave-btn\">\n                            Leave Room\n                        </button>\n                    </div>\n                    <div className=\"participants-list\">\n                        <h3>Participants ({participants.length})</h3>\n                        {participants.map(participant => (\n                            <div key={participant.id} className=\"participant-item\">\n                                {participant.avatar && (\n                                    <img \n                                        src={participant.avatar} \n                                        alt={participant.name}\n                                        className=\"participant-avatar\"\n                                    />\n                                )}\n                                <span>{participant.name}</span>\n                            </div>\n                        ))}\n                    </div>\n                </>\n            )}\n        </div>\n    );\n};\n\nexport default GroupCall; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}